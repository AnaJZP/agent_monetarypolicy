# banxico_analytics_python_fixed.py
# Versi√≥n corregida con colores IPN consistentes

import json
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
import numpy as np
from matplotlib.colors import LinearSegmentedColormap
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import plotly.io as pio
from datetime import datetime
from pathlib import Path
import re
from collections import Counter

# Configurar Plotly para generar im√°genes sin navegador
pio.kaleido.scope.mathjax = None

# Paleta de colores del IPN - Profesional
IPN_COLORS = {
    "Restrictiva": "#722F37",      # Guinda oscuro
    "Expansiva": "#4A4A4A",        # Gris oscuro
    "Neutral": "#A8A8A8",          # Plateado
    "primary": "#722F37",          # Guinda principal
    "secondary": "#B8860B",        # Dorado/plateado
    "accent": "#2F2F2F",           # Negro suave
    "background": "#FFFFFF",       # Blanco
    "light_guinda": "#8B4A52",     # Guinda claro
    "dark_silver": "#708090",      # Plateado oscuro
    "white": "#FFFFFF",
    "black": "#000000"
}

def load_json_data(json_path='banxico_analysis.json'):
    """Carga datos desde JSON y convierte a DataFrame"""
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # Convertir a DataFrame
        df = pd.DataFrame(data)
        
        # Procesar fechas
        if 'report_date' in df.columns:
            df['report_date'] = pd.to_datetime(df['report_date'])
        elif 'processing_timestamp' in df.columns:
            # Usar timestamp si no hay report_date
            df['report_date'] = pd.to_datetime(df['processing_timestamp'])
        
        df = df.sort_values('report_date').reset_index(drop=True)
        
        print(f"‚úÖ JSON cargado: {len(df)} informes")
        print(f"üìÖ Per√≠odo: {df['report_date'].min().strftime('%Y-%m')} a {df['report_date'].max().strftime('%Y-%m')}")
        
        return df
        
    except FileNotFoundError:
        print(f"‚ùå No se encontr√≥ {json_path}")
        # Buscar archivos JSON alternativos
        json_files = list(Path('.').glob('*banxico*.json'))
        if json_files:
            print("Archivos JSON disponibles:")
            for f in json_files:
                print(f"   ‚Ä¢ {f.name}")
        return None
    except Exception as e:
        print(f"‚ùå Error cargando JSON: {e}")
        return None

def create_stance_evolution_png(df, output_dir):
    """Evoluci√≥n temporal - PNG profesional con colores IPN"""
    fig = plt.figure(figsize=(16, 10), dpi=150)
    gs = fig.add_gridspec(3, 1, height_ratios=[2, 1, 1], hspace=0.3)
    
    # Panel principal - Stance Score
    ax1 = fig.add_subplot(gs[0])
    
    # L√≠nea principal
    ax1.plot(df['report_date'], df['stance_score'], 
             color=IPN_COLORS['primary'], linewidth=3, marker='o', markersize=8, 
             markerfacecolor='white', markeredgecolor=IPN_COLORS['primary'], markeredgewidth=2)
    
    # Colorear por postura
    for i in range(len(df)-1):
        stance = df['monetary_stance'].iloc[i]
        color = IPN_COLORS.get(stance, IPN_COLORS['Neutral'])
        ax1.axvspan(df['report_date'].iloc[i], df['report_date'].iloc[i+1], 
                   alpha=0.2, facecolor=color)
    
    # Bandas de referencia
    ax1.axhline(0, color='gray', linestyle='--', alpha=0.7)
    ax1.axhspan(-0.5, 0.5, alpha=0.1, color=IPN_COLORS['Neutral'], label='Zona Neutral')
    ax1.axhspan(0.5, 2, alpha=0.1, color=IPN_COLORS['Restrictiva'], label='Zona Restrictiva')
    ax1.axhspan(-2, -0.5, alpha=0.1, color=IPN_COLORS['Expansiva'], label='Zona Expansiva')
    
    ax1.set_title('Evoluci√≥n de la Postura Monetaria de Banxico\nAn√°lisis Cuantitativo de Comunicaci√≥n (2018-2025)', 
                 fontsize=20, fontweight='bold', pad=20, color=IPN_COLORS['primary'])
    ax1.set_ylabel('Puntuaci√≥n de Postura\n(-2: Muy Expansiva, +2: Muy Restrictiva)', fontsize=14)
    ax1.grid(True, alpha=0.3)
    ax1.legend(loc='upper left')
    
    # Panel 2 - Confianza
    ax2 = fig.add_subplot(gs[1])
    ax2.plot(df['report_date'], df['confidence_level'], 
             color=IPN_COLORS['secondary'], linewidth=2, marker='s', markersize=6)
    ax2.set_ylabel('Nivel de\nConfianza', fontsize=12)
    ax2.grid(True, alpha=0.3)
    ax2.set_ylim(0, 1)
    
    # Panel 3 - Se√±ales
    ax3 = fig.add_subplot(gs[2])
    ax3.plot(df['report_date'], df['senales_restrictivas'], 
             color=IPN_COLORS['accent'], linewidth=2, label='Se√±ales Restrictivas')
    ax3.plot(df['report_date'], df['senales_expansivas'], 
             color=IPN_COLORS['Expansiva'], linewidth=2, label='Se√±ales Expansivas')
    ax3.set_ylabel('Intensidad\nde Se√±ales', fontsize=12)
    ax3.set_xlabel('Fecha del Informe', fontsize=14)
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    ax3.set_ylim(0, 1)
    
    # Formato de fechas
    for ax in [ax1, ax2, ax3]:
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%b'))
        ax.tick_params(axis='x', rotation=45)
    
    plt.tight_layout()
    
    output_path = output_dir / "banxico_stance_evolution.png"
    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white')
    plt.close()
    
    print(f"üìä Gr√°fico de evoluci√≥n guardado: {output_path}")

def create_temporal_stance_timeline(df, output_dir):
    """Gr√°fico temporal de posturas vs fecha - L√≠nea de tiempo"""
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(18, 12), dpi=150)
    fig.suptitle('L√≠nea de Tiempo de Posturas Monetarias de Banxico\nEvoluci√≥n Cronol√≥gica y Cambios de R√©gimen', 
                 fontsize=18, fontweight='bold', color=IPN_COLORS['primary'])
    
    # Panel superior - Timeline con stance score
    dates = df['report_date']
    scores = df['stance_score']
    stances = df['monetary_stance']
    
    # L√≠nea principal
    ax1.plot(dates, scores, color=IPN_COLORS['primary'], linewidth=4, alpha=0.8, zorder=10)
    
    # Marcadores por tipo de postura
    for stance in stances.unique():
        mask = stances == stance
        color = IPN_COLORS[stance]
        ax1.scatter(dates[mask], scores[mask], 
                   c=color, s=120, alpha=0.8, edgecolor='white', linewidth=2,
                   label=f'Postura {stance}', zorder=15)
    
    # Bandas de contexto
    ax1.axhspan(-2, -0.5, alpha=0.15, color=IPN_COLORS['Expansiva'], label='Zona Expansiva')
    ax1.axhspan(-0.5, 0.5, alpha=0.10, color=IPN_COLORS['Neutral'], label='Zona Neutral')
    ax1.axhspan(0.5, 2, alpha=0.15, color=IPN_COLORS['Restrictiva'], label='Zona Restrictiva')
    ax1.axhline(0, color=IPN_COLORS['black'], linestyle='--', alpha=0.6, linewidth=1)
    
    ax1.set_ylabel('Puntuaci√≥n de Postura Monetaria', fontsize=14, fontweight='bold', color=IPN_COLORS['primary'])
    ax1.set_title('Evoluci√≥n del Stance Score a lo Largo del Tiempo', fontsize=16, fontweight='bold', pad=15)
    ax1.grid(True, alpha=0.3, color=IPN_COLORS['dark_silver'])
    ax1.legend(loc='upper left', framealpha=0.9)
    ax1.set_ylim(-2.2, 2.2)
    
    # Panel inferior - Distribuci√≥n temporal de posturas (barras)
    df['year_quarter'] = df['report_date'].dt.year.astype(str) + '-Q' + df['report_date'].dt.quarter.astype(str)
    
    stance_by_period = df.groupby(['year_quarter', 'monetary_stance']).size().unstack(fill_value=0)
    
    # Crear barras apiladas
    bottom = np.zeros(len(stance_by_period))
    
    for stance in ['Expansiva', 'Neutral', 'Restrictiva']:
        if stance in stance_by_period.columns:
            bars = ax2.bar(range(len(stance_by_period)), stance_by_period[stance], 
                          bottom=bottom, color=IPN_COLORS[stance], alpha=0.8, 
                          label=f'Postura {stance}', edgecolor='white', linewidth=1)
            bottom += stance_by_period[stance]
    
    ax2.set_ylabel('N√∫mero de Informes', fontsize=14, fontweight='bold', color=IPN_COLORS['primary'])
    ax2.set_xlabel('Per√≠odo', fontsize=14, fontweight='bold', color=IPN_COLORS['primary'])
    ax2.set_title('Distribuci√≥n de Posturas por Per√≠odo', fontsize=16, fontweight='bold', pad=15)
    ax2.set_xticks(range(len(stance_by_period)))
    ax2.set_xticklabels(stance_by_period.index, rotation=45, ha='right')
    ax2.legend(loc='upper right', framealpha=0.9)
    ax2.grid(True, alpha=0.3, color=IPN_COLORS['dark_silver'])
    
    # Formato de fechas para panel superior
    ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
    ax1.tick_params(axis='x', rotation=45)
    
    plt.tight_layout()
    
    output_path = output_dir / "banxico_temporal_stance_timeline.png"
    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white', 
                edgecolor=IPN_COLORS['primary'])
    plt.close()
    
    print(f"üìÖ Timeline de posturas guardado: {output_path}")

def create_main_concerns_analysis(df, output_dir):
    """An√°lisis de preocupaciones principales del reporte"""
    fig = plt.figure(figsize=(18, 14), dpi=150)
    gs = fig.add_gridspec(3, 2, height_ratios=[1.5, 1, 1], hspace=0.35, wspace=0.25)
    
    fig.suptitle('An√°lisis de Preocupaciones Principales en Informes de Banxico\nIdentificaci√≥n de Temas Centrales por Per√≠odo', 
                 fontsize=18, fontweight='bold', color=IPN_COLORS['primary'])
    
    # 1. Heatmap de preocupaciones a lo largo del tiempo (panel principal)
    ax1 = fig.add_subplot(gs[0, :])
    
    concern_metrics = ['preocupacion_inflacion', 'preocupacion_crecimiento', 'fortaleza_empleo', 'incertidumbre_politica']
    concern_labels = ['Preocupaci√≥n\nInflaci√≥n', 'Preocupaci√≥n\nCrecimiento', 'Fortaleza\nEmpleo', 'Incertidumbre\nPol√≠tica']
    
    # Crear matriz de datos para heatmap
    concern_data = df[concern_metrics].T
    concern_data.index = concern_labels
    concern_data.columns = [d.strftime('%Y-%m') for d in df['report_date']]
    
    # Crear colormap personalizado IPN
    ipn_cmap = LinearSegmentedColormap.from_list('ipn', 
                                                [IPN_COLORS['white'], IPN_COLORS['light_guinda'], IPN_COLORS['primary']])
    
    sns.heatmap(concern_data, 
                ax=ax1, 
                cmap=ipn_cmap,
                cbar_kws={'label': 'Nivel de Intensidad', 'shrink': 0.6},
                linewidths=1, 
                linecolor='white',
                square=False,
                fmt='.2f')
    
    ax1.set_title('Mapa de Calor: Intensidad de Preocupaciones por Per√≠odo', 
                 fontsize=16, fontweight='bold', pad=15, color=IPN_COLORS['primary'])
    ax1.set_xlabel('Fecha del Informe', fontsize=12, fontweight='bold')
    ax1.set_ylabel('Tipo de Preocupaci√≥n', fontsize=12, fontweight='bold')
    ax1.tick_params(axis='x', rotation=45)
    
    # 2. Preocupaci√≥n dominante por per√≠odo (barras)
    ax2 = fig.add_subplot(gs[1, 0])
    
    # Identificar preocupaci√≥n principal en cada per√≠odo
    dominant_concerns = []
    for _, row in df.iterrows():
        concerns = {
            'Inflaci√≥n': row['preocupacion_inflacion'],
            'Crecimiento': row['preocupacion_crecimiento'],
            'Empleo': row['fortaleza_empleo'],
            'Incertidumbre': row['incertidumbre_politica']
        }
        dominant = max(concerns.keys(), key=lambda k: concerns[k])
        dominant_concerns.append(dominant)
    
    df['dominant_concern'] = dominant_concerns
    concern_counts = df['dominant_concern'].value_counts()
    
    colors = [IPN_COLORS['primary'], IPN_COLORS['light_guinda'], IPN_COLORS['secondary'], IPN_COLORS['dark_silver']]
    bars = ax2.bar(concern_counts.index, concern_counts.values, 
                   color=colors[:len(concern_counts)], alpha=0.8, edgecolor='white', linewidth=2)
    
    ax2.set_title('Preocupaci√≥n Dominante\nFrecuencia por Tipo', fontweight='bold', color=IPN_COLORS['primary'])
    ax2.set_ylabel('N√∫mero de Informes', fontweight='bold')
    ax2.tick_params(axis='x', rotation=45)
    ax2.grid(True, alpha=0.3, color=IPN_COLORS['dark_silver'])
    
    # Agregar valores en las barras
    for bar in bars:
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{int(height)}', ha='center', va='bottom', fontweight='bold')
    
    # 3. Evoluci√≥n de la preocupaci√≥n principal
    ax3 = fig.add_subplot(gs[1, 1])
    
    # Crear serie temporal de la m√©trica m√°s alta en cada momento
    max_concerns = df[concern_metrics].max(axis=1)
    ax3.plot(df['report_date'], max_concerns, 
             color=IPN_COLORS['primary'], linewidth=3, marker='o', markersize=8,
             markerfacecolor='white', markeredgecolor=IPN_COLORS['primary'], markeredgewidth=2)
    ax3.fill_between(df['report_date'], max_concerns, alpha=0.3, color=IPN_COLORS['light_guinda'])
    
    ax3.set_title('Intensidad de Preocupaci√≥n\nPrincipal en el Tiempo', fontweight='bold', color=IPN_COLORS['primary'])
    ax3.set_ylabel('Nivel M√°ximo', fontweight='bold')
    ax3.grid(True, alpha=0.3, color=IPN_COLORS['dark_silver'])
    ax3.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
    ax3.tick_params(axis='x', rotation=45)
    
    # 4. An√°lisis de cambios de enfoque (panel inferior)
    ax4 = fig.add_subplot(gs[2, :])
    
    # Detectar cambios en preocupaci√≥n dominante
    concern_changes = df['dominant_concern'] != df['dominant_concern'].shift(1)
    change_points = df[concern_changes]
    
    if len(change_points) > 1:
        # Crear timeline de cambios
        y_positions = {'Inflaci√≥n': 3, 'Crecimiento': 2, 'Empleo': 1, 'Incertidumbre': 0}
        
        for i, (_, row) in enumerate(change_points.iterrows()):
            concern = row['dominant_concern']
            y_pos = y_positions[concern]
            
            # Punto de cambio
            ax4.scatter(row['report_date'], y_pos, s=150, 
                       color=IPN_COLORS['primary'], edgecolor='white', linewidth=2, zorder=10)
            
            # L√≠nea conectora horizontal
            if i < len(change_points) - 1:
                next_date = change_points.iloc[i + 1]['report_date']
                ax4.hlines(y_pos, row['report_date'], next_date, 
                          colors=IPN_COLORS['light_guinda'], linewidth=4, alpha=0.7)
        
        ax4.set_yticks(list(y_positions.values()))
        ax4.set_yticklabels(list(y_positions.keys()))
        ax4.set_title('Timeline de Cambios en Preocupaci√≥n Dominante', 
                     fontsize=16, fontweight='bold', color=IPN_COLORS['primary'])
        ax4.set_xlabel('Fecha', fontweight='bold')
        ax4.set_ylabel('Tipo de Preocupaci√≥n', fontweight='bold')
        ax4.grid(True, alpha=0.3, color=IPN_COLORS['dark_silver'])
        ax4.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
        ax4.tick_params(axis='x', rotation=45)
    
    plt.tight_layout()
    
    output_path = output_dir / "banxico_main_concerns_analysis.png"
    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white',
                edgecolor=IPN_COLORS['primary'])
    plt.close()
    
    print(f"üéØ An√°lisis de preocupaciones principales guardado: {output_path}")

def create_policy_radar_png(df, output_dir):
    """Radar de pol√≠ticas comparativo"""
    fig = plt.figure(figsize=(15, 10), dpi=150)
    
    # Seleccionar per√≠odos
    latest = df.iloc[-1]
    earliest = df.iloc[0] 
    mid_point = df.iloc[len(df)//2]
    
    metrics = ['preocupacion_inflacion', 'preocupacion_crecimiento', 'fortaleza_empleo',
               'incertidumbre_politica', 'senales_expansivas', 'senales_restrictivas']
    labels = ['Preocupaci√≥n\nInflaci√≥n', 'Preocupaci√≥n\nCrecimiento', 'Fortaleza\nEmpleo',
              'Incertidumbre\nPol√≠tica', 'Se√±ales\nExpansivas', 'Se√±ales\nRestrictivas']
    
    # Crear 3 subplots de radar
    fig.suptitle('Evoluci√≥n de Patrones de Se√±ales de Pol√≠tica Monetaria\nComparaci√≥n por Intensidad en Diferentes Dimensiones', 
                 fontsize=18, fontweight='bold', y=0.95, color=IPN_COLORS['primary'])
    
    periods = [
        ('Per√≠odo Inicial', earliest, IPN_COLORS['secondary'], 0),
        ('Per√≠odo Medio', mid_point, IPN_COLORS['Neutral'], 1), 
        ('Per√≠odo Reciente', latest, IPN_COLORS['primary'], 2)
    ]
    
    angles = np.linspace(0, 2 * np.pi, len(labels), endpoint=False).tolist()
    angles += angles[:1]
    
    for name, data, color, idx in periods:
        ax = fig.add_subplot(1, 3, idx+1, projection='polar')
        
        values = [data[metric] for metric in metrics]
        values += values[:1]
        
        ax.plot(angles, values, 'o-', linewidth=2, color=color, label=name)
        ax.fill(angles, values, alpha=0.25, color=color)
        
        ax.set_xticks(angles[:-1])
        ax.set_xticklabels(labels, fontsize=10)
        ax.set_ylim(0, 1)
        ax.set_yticks([0.25, 0.5, 0.75, 1.0])
        ax.set_yticklabels(['0.25', '0.50', '0.75', '1.00'], fontsize=8)
        ax.grid(True, alpha=0.3)
        
        # T√≠tulo con fecha
        date_str = data['report_date'].strftime('%Y-%m')
        ax.set_title(f'{name}\n({date_str})', fontsize=14, fontweight='bold', pad=20)
    
    plt.tight_layout()
    
    output_path = output_dir / "banxico_policy_radar_comparison.png"
    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white')
    plt.close()
    
    print(f"üéØ Radar comparativo guardado: {output_path}")

def create_correlation_matrix_png(df, output_dir):
    """Matriz de correlaciones profesional"""
    # Variables para correlaci√≥n
    corr_vars = ['stance_score', 'confidence_level', 'preocupacion_inflacion',
                'preocupacion_crecimiento', 'fortaleza_empleo', 'incertidumbre_politica',
                'senales_expansivas', 'senales_restrictivas']
    
    corr_matrix = df[corr_vars].corr()
    
    # Labels m√°s descriptivos
    labels = ['Postura\nMonetaria', 'Nivel de\nConfianza', 'Preocup.\nInflaci√≥n',
              'Preocup.\nCrecimiento', 'Fortaleza\nEmpleo', 'Incertidumbre\nPol√≠tica',
              'Se√±ales\nExpansivas', 'Se√±ales\nRestrictivas']
    
    fig, ax = plt.subplots(figsize=(12, 10), dpi=150)
    
    # Crear heatmap
    mask = np.triu(np.ones_like(corr_matrix, dtype=bool), k=1)
    heatmap = sns.heatmap(corr_matrix, 
                         annot=True, 
                         fmt='.2f',
                         cmap='RdBu_r',
                         center=0,
                         mask=mask,
                         square=True,
                         xticklabels=labels,
                         yticklabels=labels,
                         cbar_kws={'shrink': 0.8},
                         ax=ax)
    
    ax.set_title('Matriz de Correlaciones de M√©tricas de Pol√≠tica Monetaria\nAn√°lisis de Interdependencias entre Se√±ales de Comunicaci√≥n', 
                fontsize=16, fontweight='bold', pad=20, color=IPN_COLORS['primary'])
    
    plt.xticks(rotation=45, ha='right')
    plt.yticks(rotation=0)
    plt.tight_layout()
    
    output_path = output_dir / "banxico_correlation_matrix.png"
    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white')
    plt.close()
    
    print(f"üî• Matriz de correlaciones guardada: {output_path}")

def create_stance_distribution_png(df, output_dir):
    """Distribuci√≥n y transiciones de posturas"""
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12), dpi=150)
    fig.suptitle('An√°lisis de Distribuci√≥n y Transiciones de Posturas Monetarias', 
                 fontsize=18, fontweight='bold', color=IPN_COLORS['primary'])
    
    # 1. Distribuci√≥n de posturas
    stance_counts = df['monetary_stance'].value_counts()
    colors = [IPN_COLORS[stance] for stance in stance_counts.index]
    
    wedges, texts, autotexts = ax1.pie(stance_counts.values, 
                                      labels=stance_counts.index,
                                      colors=colors,
                                      autopct='%1.1f%%',
                                      startangle=90)
    ax1.set_title('Distribuci√≥n de Posturas\nMonetarias (%)', fontweight='bold')
    
    # 2. Evoluci√≥n por a√±o
    df['year'] = df['report_date'].dt.year
    yearly_stance = df.groupby(['year', 'monetary_stance']).size().unstack(fill_value=0)
    
    yearly_stance.plot(kind='bar', stacked=True, ax=ax2, 
                      color=[IPN_COLORS[col] for col in yearly_stance.columns])
    ax2.set_title('Evoluci√≥n Anual de Posturas', fontweight='bold')
    ax2.set_xlabel('A√±o')
    ax2.set_ylabel('N√∫mero de Informes')
    ax2.legend(title='Postura', bbox_to_anchor=(1.05, 1), loc='upper left')
    ax2.tick_params(axis='x', rotation=45)
    
    # 3. Histograma de stance scores
    ax3.hist(df['stance_score'], bins=15, alpha=0.7, color=IPN_COLORS['primary'], edgecolor='black')
    ax3.axvline(df['stance_score'].mean(), color=IPN_COLORS['accent'], linestyle='--', 
               linewidth=2, label=f'Promedio: {df["stance_score"].mean():.2f}')
    ax3.set_title('Distribuci√≥n de Puntuaciones\nde Postura', fontweight='bold')
    ax3.set_xlabel('Stance Score')
    ax3.set_ylabel('Frecuencia')
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    
    # 4. Volatilidad temporal
    df['stance_volatility'] = df['stance_score'].rolling(window=3, center=True).std()
    ax4.plot(df['report_date'], df['stance_volatility'], 
            color=IPN_COLORS['accent'], linewidth=2, marker='o')
    ax4.set_title('Volatilidad de la Postura\n(Desviaci√≥n Est√°ndar M√≥vil)', fontweight='bold')
    ax4.set_xlabel('Fecha')
    ax4.set_ylabel('Volatilidad (3 per√≠odos)')
    ax4.grid(True, alpha=0.3)
    ax4.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
    
    plt.tight_layout()
    
    output_path = output_dir / "banxico_stance_analysis.png"
    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white')
    plt.close()
    
    print(f"üìà An√°lisis de posturas guardado: {output_path}")

def generate_summary_report(df, output_dir):
    """Genera reporte ejecutivo en texto"""
    report = f"""
=== REPORTE EJECUTIVO: AN√ÅLISIS DE POL√çTICA MONETARIA DE BANXICO ===

üìä RESUMEN DEL PER√çODO:
‚Ä¢ Per√≠odo analizado: {df['report_date'].min().strftime('%B %Y')} - {df['report_date'].max().strftime('%B %Y')}
‚Ä¢ Total de informes: {len(df)}
‚Ä¢ Duraci√≥n: {(df['report_date'].max() - df['report_date'].min()).days / 365.25:.1f} a√±os

üéØ ESTAD√çSTICAS DE POSTURA:
‚Ä¢ Postura promedio: {df['stance_score'].mean():.2f}
‚Ä¢ Desviaci√≥n est√°ndar: {df['stance_score'].std():.2f}
‚Ä¢ Postura m√°s restrictiva: {df['stance_score'].max():.2f} ({df.loc[df['stance_score'].idxmax(), 'report_date'].strftime('%B %Y')})
‚Ä¢ Postura m√°s expansiva: {df['stance_score'].min():.2f} ({df.loc[df['stance_score'].idxmin(), 'report_date'].strftime('%B %Y')})

üìã DISTRIBUCI√ìN DE POSTURAS:
"""
    
    for stance, count in df['monetary_stance'].value_counts().items():
        percentage = (count / len(df)) * 100
        report += f"‚Ä¢ {stance}: {count} informes ({percentage:.1f}%)\n"
    
    report += f"""
üìà AN√ÅLISIS DE TENDENCIAS:
‚Ä¢ Tendencia reciente (√∫ltimos 5): {"M√°s restrictiva" if df['stance_score'].tail(5).mean() > df['stance_score'].head(5).mean() else "M√°s expansiva"}
‚Ä¢ Volatilidad promedio: {df['stance_score'].std():.2f}
‚Ä¢ Nivel de confianza promedio: {df['confidence_level'].mean():.2f}

üîë M√âTRICAS CLAVE (PROMEDIOS):
‚Ä¢ Preocupaci√≥n por inflaci√≥n: {df['preocupacion_inflacion'].mean():.2f}
‚Ä¢ Preocupaci√≥n por crecimiento: {df['preocupacion_crecimiento'].mean():.2f}
‚Ä¢ Fortaleza del empleo: {df['fortaleza_empleo'].mean():.2f}
‚Ä¢ Incertidumbre pol√≠tica: {df['incertidumbre_politica'].mean():.2f}

Reporte generado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
    
    with open(output_dir / "reporte_ejecutivo.txt", 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"üìã Reporte ejecutivo guardado: reporte_ejecutivo.txt")

def generate_key_signals_report(df_signals, output_dir):
    """Genera reporte de las se√±ales m√°s relevantes por fecha"""
    
    # Seleccionar se√±ales m√°s significativas (por longitud y stance extremo)
    df_signals['abs_stance'] = df_signals['stance_score'].abs()
    df_signals['signal_length'] = df_signals['key_policy_signal'].astype(str).str.len()
    
    # Top 10 se√±ales m√°s significativas
    top_signals = df_signals.nlargest(10, 'abs_stance')
    
    report = f"""
=== REPORTE DE SE√ëALES CLAVE DE POL√çTICA MONETARIA ===

üìÖ AN√ÅLISIS DE COMUNICACI√ìN BANXICO
Per√≠odo: {df_signals['report_date'].min().strftime('%B %Y')} - {df_signals['report_date'].max().strftime('%B %Y')}

üîë TOP 10 SE√ëALES M√ÅS SIGNIFICATIVAS (por intensidad de postura):

"""
    
    for i, (_, signal) in enumerate(top_signals.iterrows(), 1):
        date_str = signal['report_date'].strftime('%B %Y')
        stance_str = signal['monetary_stance']
        score_str = f"{signal['stance_score']:+.2f}"
        
        report += f"{i:2d}. [{date_str}] {stance_str} ({score_str})\n"
        report += f"    \"{signal['key_policy_signal']}\"\n\n"
    
    # Estad√≠sticas adicionales
    avg_length = df_signals['signal_length'].mean()
    most_complex = df_signals.loc[df_signals['signal_length'].idxmax()]
    
    report += f"""
üìä ESTAD√çSTICAS DE SE√ëALES:
‚Ä¢ Total de se√±ales analizadas: {len(df_signals)}
‚Ä¢ Longitud promedio: {avg_length:.0f} caracteres
‚Ä¢ Se√±al m√°s compleja: {most_complex['report_date'].strftime('%B %Y')} ({most_complex['signal_length']} caracteres)

üéØ PATRONES IDENTIFICADOS:
"""
    
    # Analizar patrones por postura
    for stance in ['Restrictiva', 'Expansiva', 'Neutral']:
        stance_data = df_signals[df_signals['monetary_stance'] == stance]
        if not stance_data.empty:
            avg_len = stance_data['signal_length'].mean()
            count = len(stance_data)
            report += f"‚Ä¢ {stance}: {count} se√±ales, {avg_len:.0f} caracteres promedio\n"
    
    report += f"""
Reporte generado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
    
    # Guardar reporte
    with open(output_dir / "key_policy_signals_report.txt", 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"üìã Reporte de se√±ales clave guardado: key_policy_signals_report.txt")

def create_key_policy_signals_analysis(df, output_dir):
    """An√°lisis de se√±ales clave de pol√≠tica monetaria por fecha"""
    fig = plt.figure(figsize=(18, 12), dpi=150)
    gs = fig.add_gridspec(3, 2, height_ratios=[1.5, 1, 1], hspace=0.35, wspace=0.25)
    
    fig.suptitle('An√°lisis de Se√±ales Clave de Pol√≠tica Monetaria de Banxico\nExtracci√≥n de Frases Relevantes por Per√≠odo', 
                 fontsize=18, fontweight='bold', color=IPN_COLORS['primary'])
    
    # 1. Timeline de se√±ales clave (panel principal)
    ax1 = fig.add_subplot(gs[0, :])
    
    # Preparar datos para timeline
    df_signals = df[['report_date', 'key_policy_signal', 'stance_score', 'monetary_stance']].copy()
    df_signals = df_signals.dropna(subset=['key_policy_signal'])
    
    if len(df_signals) == 0:
        # Si no hay se√±ales, crear un gr√°fico simple
        ax1.text(0.5, 0.5, 'No hay se√±ales clave disponibles en los datos', 
                ha='center', va='center', transform=ax1.transAxes, fontsize=16)
        ax1.set_title('Timeline de Se√±ales Clave de Pol√≠tica Monetaria (Sin Datos)', 
                     fontsize=16, fontweight='bold', color=IPN_COLORS['primary'])
    else:
        # Crear colores por postura
        colors = [IPN_COLORS.get(stance, IPN_COLORS['Neutral']) for stance in df_signals['monetary_stance']]
        
        # Scatter plot con se√±ales en el eje Y (usando √≠ndice) y fechas en X
        y_positions = range(len(df_signals))
        scatter = ax1.scatter(df_signals['report_date'], y_positions, 
                             c=colors, s=100, alpha=0.7, edgecolor='white', linewidth=2)
        
        # Agregar texto de se√±ales (truncado para legibilidad)
        for i, (_, row) in enumerate(df_signals.iterrows()):
            signal_text = str(row['key_policy_signal'])[:50] + "..." if len(str(row['key_policy_signal'])) > 50 else str(row['key_policy_signal'])
            ax1.text(row['report_date'], i, f"  {signal_text}", 
                    fontsize=9, va='center', ha='left',
                    bbox=dict(boxstyle="round,pad=0.3", facecolor='white', alpha=0.8, 
                             edgecolor=IPN_COLORS.get(row['monetary_stance'], 'gray')))
        
        ax1.set_title('Timeline de Se√±ales Clave de Pol√≠tica Monetaria', 
                     fontsize=16, fontweight='bold', pad=15, color=IPN_COLORS['primary'])
        ax1.set_xlabel('Fecha del Informe', fontweight='bold')
        ax1.set_ylabel('Orden Cronol√≥gico de Informes', fontweight='bold')
        ax1.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
        ax1.tick_params(axis='x', rotation=45)
    
    ax1.grid(True, alpha=0.3, color=IPN_COLORS['dark_silver'])
    
    # 2. An√°lisis de frecuencia de palabras clave (izquierda inferior)
    ax2 = fig.add_subplot(gs[1, 0])
    
    if len(df_signals) > 0:
        # Extraer palabras clave m√°s comunes
        all_signals = ' '.join(df_signals['key_policy_signal'].astype(str))
        # Palabras relevantes para pol√≠tica monetaria (filtrar stop words)
        words = re.findall(r'\b[a-z√°√©√≠√≥√∫√±]{4,}\b', all_signals.lower())
        
        # Filtrar palabras espec√≠ficas de pol√≠tica monetaria
        monetary_keywords = ['inflaci√≥n', 'tasa', 'tasas', 'crecimiento', 'riesgo', 'riesgos', 
                            'objetivo', 'estabilidad', 'pol√≠tica', 'monetaria', 'banxico',
                            'econom√≠a', 'econ√≥mica', 'precios', 'expectativas', 'decisi√≥n']
        
        filtered_words = [word for word in words if word in monetary_keywords]
        word_counts = Counter(filtered_words)
        
        if word_counts:
            top_words = word_counts.most_common(8)
            words_labels, word_frequencies = zip(*top_words)
            
            bars = ax2.barh(words_labels, word_frequencies, color=IPN_COLORS['secondary'], alpha=0.7)
            ax2.set_title('Palabras Clave M√°s Frecuentes\nen Se√±ales de Pol√≠tica', fontweight='bold')
            ax2.set_xlabel('Frecuencia')
            
            # Agregar valores en barras
            for bar in bars:
                width = bar.get_width()
                ax2.text(width + 0.1, bar.get_y() + bar.get_height()/2, 
                        f'{int(width)}', ha='left', va='center', fontweight='bold')
        else:
            ax2.text(0.5, 0.5, 'No se encontraron\npalabras clave relevantes', 
                    ha='center', va='center', transform=ax2.transAxes)
    else:
        ax2.text(0.5, 0.5, 'Sin datos disponibles', 
                ha='center', va='center', transform=ax2.transAxes)
    
    ax2.set_title('Palabras Clave M√°s Frecuentes\nen Se√±ales de Pol√≠tica', fontweight='bold')
    
    # 3. Intensidad de se√±ales por postura (derecha inferior)
    ax3 = fig.add_subplot(gs[1, 1])
    
    if len(df_signals) > 0:
        # Calcular longitud promedio de se√±ales por postura
        signal_lengths = df.groupby('monetary_stance')['key_policy_signal'].apply(
            lambda x: x.astype(str).str.len().mean()
        ).dropna()
        
        if len(signal_lengths) > 0:
            colors_stance = [IPN_COLORS.get(stance, IPN_COLORS['Neutral']) for stance in signal_lengths.index]
            bars = ax3.bar(signal_lengths.index, signal_lengths.values, 
                           color=colors_stance, alpha=0.7, edgecolor='white', linewidth=2)
            
            # Agregar valores en barras
            for bar in bars:
                height = bar.get_height()
                ax3.text(bar.get_x() + bar.get_width()/2., height + 1,
                        f'{int(height)}', ha='center', va='bottom', fontweight='bold')
            
            ax3.set_ylabel('Caracteres Promedio')
            ax3.tick_params(axis='x', rotation=45)
        else:
            ax3.text(0.5, 0.5, 'Sin datos suficientes\npara an√°lisis', 
                    ha='center', va='center', transform=ax3.transAxes)
    else:
        ax3.text(0.5, 0.5, 'Sin datos disponibles', 
                ha='center', va='center', transform=ax3.transAxes)
    
    ax3.set_title('Longitud Promedio de Se√±ales\npor Tipo de Postura', fontweight='bold')
    
    # 4. Evoluci√≥n de complejidad de se√±ales (panel inferior completo)
    ax4 = fig.add_subplot(gs[2, :])
    
    # Calcular complejidad de se√±ales (n√∫mero de palabras)
    df['signal_complexity'] = df['key_policy_signal'].astype(str).str.split().str.len()
    df['signal_complexity'] = df['signal_complexity'].fillna(0)  # Llenar NaN con 0
    
    # Crear gr√°fico de l√≠nea con barras de complejidad
    ax4_twin = ax4.twinx()
    
    # L√≠nea de stance score
    line = ax4.plot(df['report_date'], df['stance_score'], 
                   color=IPN_COLORS['primary'], linewidth=3, marker='o', markersize=6,
                   label='Stance Score')
    
    # Barras de complejidad
    bars = ax4_twin.bar(df['report_date'], df['signal_complexity'], 
                       alpha=0.3, color=IPN_COLORS['secondary'], width=20,
                       label='Complejidad Se√±al (# palabras)')
    
    ax4.set_xlabel('Fecha del Informe', fontweight='bold')
    ax4.set_ylabel('Stance Score', fontweight='bold', color=IPN_COLORS['primary'])
    ax4_twin.set_ylabel('Complejidad de Se√±al (palabras)', fontweight='bold', color=IPN_COLORS['secondary'])
    
    ax4.set_title('Evoluci√≥n de Stance Score vs Complejidad de Se√±ales Clave', 
                 fontsize=16, fontweight='bold', color=IPN_COLORS['primary'])
    
    # Leyendas combinadas
    lines1, labels1 = ax4.get_legend_handles_labels()
    lines2, labels2 = ax4_twin.get_legend_handles_labels()
    ax4.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    ax4.grid(True, alpha=0.3, color=IPN_COLORS['dark_silver'])
    ax4.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
    ax4.tick_params(axis='x', rotation=45)
    
    plt.tight_layout()
    
    output_path = output_dir / "banxico_key_policy_signals.png"
    plt.savefig(output_path, dpi=300, bbox_inches='tight', facecolor='white')
    plt.close()
    
    print(f"üîç An√°lisis de se√±ales clave guardado: {output_path}")
    
    # Generar reporte de se√±ales destacadas solo si hay datos
    if len(df_signals) > 0:
        generate_key_signals_report(df_signals, output_dir)

def main():
    """Funci√≥n principal"""
    print("=== üìä An√°lisis Visual Avanzado de Banxico (JSON ‚Üí PNG) ===")
    
    # Cargar datos del JSON
    df = load_json_data()
    
    if df is None:
        return
    
    # Crear directorio de salida
    output_dir = Path("banxico_visualizaciones")
    output_dir.mkdir(exist_ok=True)
    
    # Generar todas las visualizaciones
    try:
        create_stance_evolution_png(df, output_dir)
        create_temporal_stance_timeline(df, output_dir)
        create_main_concerns_analysis(df, output_dir)
        create_policy_radar_png(df, output_dir)
        create_correlation_matrix_png(df, output_dir)
        create_stance_distribution_png(df, output_dir)
        create_key_policy_signals_analysis(df, output_dir)  # Funci√≥n corregida
        generate_summary_report(df, output_dir)
        
        print(f"\nüéâ ¬°An√°lisis completado!")
        print(f"üìÅ Archivos guardados en: {output_dir.absolute()}")
        print("üìä Gr√°ficos generados:")
        print("   ‚Ä¢ banxico_stance_evolution.png")
        print("   ‚Ä¢ banxico_temporal_stance_timeline.png")
        print("   ‚Ä¢ banxico_main_concerns_analysis.png")
        print("   ‚Ä¢ banxico_policy_radar_comparison.png") 
        print("   ‚Ä¢ banxico_correlation_matrix.png")
        print("   ‚Ä¢ banxico_stance_analysis.png")
        print("   ‚Ä¢ banxico_key_policy_signals.png")
        print("   ‚Ä¢ reporte_ejecutivo.txt")
        print("   ‚Ä¢ key_policy_signals_report.txt (si hay datos disponibles)")
        print("\n‚ú® Todos los gr√°ficos est√°n listos para presentaciones!")
        
    except Exception as e:
        print(f"‚ùå Error durante la generaci√≥n: {e}")
        print("üîß Revisa que el archivo JSON tenga las columnas necesarias")

if __name__ == "__main__":
    main()